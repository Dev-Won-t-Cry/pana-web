datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  Done
  InProgress
  Todo
}

model User {
  id            String          @id @default(cuid())
  //
  email         String          @unique
  emailVerified DateTime?
  password      String?
  //
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  //
  Authenticator Authenticator[]
  //
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  //
  Frame         Frame[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Frame {
  id        String   @id @default(cuid())
  title     String
  //
  lists     List[]
  //
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id        String   @id @default(cuid())
  title     String
  order     Int
  //
  cards     Card[]
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Frame     Frame    @relation(fields: [frameId], references: [id])
  frameId   String
}

model Card {
  id        String   @id @default(cuid())
  title     String
  status    Status
  order     Int
  //
  listId    String
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}
